## Java 平台上 AOP 的实现机制

- 动态代理

- 动态字节码增强

## AOP 设计的相关概念

- 切面 Aspect
	- 通知和切点的结合

- 通知 Advice
	- 切面的工作
	- 通知定义了切面`是什么`以及`何时`使用
	- 5种类型的通知
		- 前置通知
		- 后置通知
		- 返回通知
		- 异常通知
		- 环绕通知

- 切点 Pointcut
	- 切点定义了`何处（在哪些连接点）`使用切面

- 连接点 Joinpoint
	- 应用执行过程中能够插入切面的一个点

- 引入 Introduction
	- 引入允许我们向现有类添加新的方法和属性

- 织入 Weaving
	- 织入是把切面应用到目标对象并创建新的代理对象的过程
	- 在目标对象的生命周期里有多个点可以进行织入
		- 编译期
		- 类加载期
		- 运行期

AOP：在一个或多个连接点上（由切点决定），可以把切面的功能（通知）织入到程序的执行过程中

## Spring对AOP的支持

- 4种类型的AOP支持
	- 基于代理的经典Spring AOP
	- 纯POJO切面
	- @AspectJ注解驱动的切面
	- 注入式AspectJ切面
- 构建于动态代理基础之上，因此Spring对AOP的支持局限于方法拦截

## 通过切点选择连接点

- 使用AspectJ的切点表达式语言来定义切点

- Spring AOP所支持的AspecJ切点指示器
	- args(`参数类型`)
		- 捕捉拥有`指定参数类型`和`指定参数数量`的方法级连接点，而`不管`该方法在什么类型中被声明
		- 限定连接点的参数也会被传递给通知，声明参数名称
		- 在运行期间动态检查参数类型
	- @arg(`注解类型`)
		- 传入的参数类型被该注解标注
	- execution()
		- 匹配拥有特定方法签名的连接点
		- 格式：modifiers-pattern? `返回类型` `类型声明?`（限定哪个类中的方法） `方法名` (`方法参数`) throw-pattern?
		- 两种通配符
			- `*`：可用于任何部分的匹配模式中
			- `..`：可用于两个位置
				- declaring-type-pattern：指定多个层次的类型声明
				- 方法参数匹配模式：方法参数不限
	- this()和target()
		- `AspectJ`中的定义
			- this指代调用方法一方所在的对象
			- target指代被调用方法所在的对象
			- 例子：Object1和Object2都调用Object3的方法，那么Pointcut表达式定义this(Object2) && target(Object3)只会当Object2调用Object3上的方法的时候才会匹配
		- `Spring AOP`中的定义
			- this指代目标对象的代理对象
			- target指代目标对象
	- @target(`注解类型`)和@within(`注解类型`)
		- 标注了改注解的类的所有方法都会被匹配
		- @within静态匹配，@target运行时动态匹配
	- within()
		- 只接受`类型声明`
		- 限制连接点匹配指定的类型 
	- @annotation(`注解类型`)
		- 检查所有方法，被该注解标注的方法都会被匹配

### 编写切点

切点表达式：`execution(* com.fz.Performance.perform(..))`

- execution：在方法执行时触发
- * ：返回任意类型
- com.fz.Performance：方法所属的类
- perform：方法
- (..)：使用任意参数

切点表达式：`execution(* com.fz.Performance.perform(..)) && within(com.fz.*)`

- &&：与操作
- within(com.fz.* )：当com.fz包下任意类的方法被调用时

切点表达式：`execution(* com.fz.Performance.perform(..)) and bean('woodstock')`

- bean()：使用beanID或者bean名称作为参数来限制切点只匹配特定的bean

## 使用注解创建切面

通过少量注解把任意类变成切面

### 定义切面

- @Aspect：此注解表明此类是一个切面
- 5个注解定义通知（@Aspect类中的方法）
	- @After
	- @AfterReturning(pointcut="", returning="returnValue")
		- returning：将返回值绑定到Advice方法中
	- @AfterThrowing(pointcut="", throwing="e")
		- throwing：限定Advice定义方法的参数名
	- @Around
	- @Before
- @Pointcut
	- 在一个@Aspect切面内定义可重用的切点
- 在Advice定义中访问Joinpoint处的方法参数
	- 通过JoinPoint
	- 通过args绑定

```java
@Before("myPointcut()")
public void beforeMethod(JoinPoint jp) {
	jp.getArgs();
}
```


```java
@Aspect
public class MyAspect {

	@Pointcut("execution(* com.fz.Performance.perform(..))")
	public void performance() {}

	@Before("performance()")
	public void beforePerform() {
		System.out.println("Start to perform.");
	}
}
```

### 在JavaConfig中启动AspectJ注解的自动代理

```java
@Configuration
@EnableAspectJAutoProxy
@ComponentScan
public class MyBeanConfig {

	@Bean
	public MyAspect myAspect() {
		return new MyAspect();
	}
}
```

### 在XML中启动AspectJ注解的自动代理

```xml
<aop:aspectj-autoproxy />
```

### 创建环绕通知 Around Advice

- ProcessedingJoinPoint
	- proceed()

```java
@Aspect
public class MyAspect {

	@Pointcut("execution(* com.fz.Performance.perform(..))")
	public void performance() {}

	@Around("performance()")
	public void watchPerformance(ProcessedingJoinPoint jp) {
		try {
			System.out.println("Start!");
			jp.proceed();
			System.out.println("Finish!")
		} catch (Throwable e) {
			System.out.println("Error")
		}
	}
}
```

### 处理通知中的参数

- args(value)：表明传递给performance方法的int型参数也会传递到通知beforePerform中去，参数的名称与切点方法签名中的参数相匹配

```java
@Aspect
public class MyAspect {

	@Pointcut("execution(* com.fz.Performance.perform(int)) && args(value)")
	public void performance(int value) {}

	@Before("performance(value)")
	public void beforePerform(int value) {
		System.out.println("Start to perform:" + value);
	}
}
```

### 通过注解引入新功能 Introduction

```java

@Aspect
public class MyIntroducer {

	@DeclareParents(value="com.fz.Performance+",
		defaultImpl=DefaultEncoreable.class)
	public static Encoreable encoreable;
}
```

- @DeclareParents注解由三部分构成
	- value：属性指定了哪种类型的bean要引入该接口，在本例中也就是所有实现Performance的类型，标记符后面的加号标示Performance所有的子类型而不是其本身
	- defaultImpl：属性指定了为引入功能提供实现的类
	- @DeclareParents注解所标注的静态属性：指明了要引入的接口。本例中为Encoreable

### 在XML中声明切面

```xml
<aop:config>
	<aop:aspect ref="myAspect">
		<aop:pointcut id="performance" expression="execution(* com.fz.Performance.perform(..))" />
		<aop:before pointcut-ref="performance" method="beforePerform" />
		<aop:after-returning pointcut-ref="performance" method="finish" />
		<aop:after-throwing pointcut-ref="performance" method="error" />
		<aop:around pointcut="execution(* com.fz.Performance.perform(int)) and args(value)" method="watchPerformance" />
		<aop:declare-parents types-matching="com.fz.Performance+" implement-interface="Encoreable" default-impl="com.fz.DefaultEncoreable" />
	</aop:aspect>
</aop:config>
```

```xml
<aop:config>
	<aop:aspect ref="myAspect">
		<aop:declare-parents types-matching="com.fz.Performance+" implement-interface="Encoreable" delegate-ref="defaultEncoreable" />
	</aop:aspect>
</aop:config>
<bean id=:"defaultEncoreable" class="com.fz.DefaultEncoreable" />
```

## 注入AspecJ切面

## AOP应用案例

